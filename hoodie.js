// Generated by CoffeeScript 1.3.3
var Events,
  __slice = [].slice;

Events = (function() {

  function Events() {}

  Events.prototype.bind = function(ev, callback) {
    var calls, evs, name, _i, _len, _results;
    evs = ev.split(' ');
    calls = this.hasOwnProperty('_callbacks') && this._callbacks || (this._callbacks = {});
    _results = [];
    for (_i = 0, _len = evs.length; _i < _len; _i++) {
      name = evs[_i];
      calls[name] || (calls[name] = []);
      _results.push(calls[name].push(callback));
    }
    return _results;
  };

  Events.prototype.on = Events.prototype.bind;

  Events.prototype.one = function(ev, callback) {
    return this.bind(ev, function() {
      this.unbind(ev, arguments.callee);
      return callback.apply(this, arguments);
    });
  };

  Events.prototype.trigger = function() {
    var args, callback, ev, list, _i, _len, _ref;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    ev = args.shift();
    list = this.hasOwnProperty('_callbacks') && ((_ref = this._callbacks) != null ? _ref[ev] : void 0);
    if (!list) {
      return;
    }
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      callback = list[_i];
      callback.apply(this, args);
    }
    return true;
  };

  Events.prototype.unbind = function(ev, callback) {
    var cb, i, list, _i, _len, _ref;
    if (!ev) {
      this._callbacks = {};
      return this;
    }
    list = (_ref = this._callbacks) != null ? _ref[ev] : void 0;
    if (!list) {
      return this;
    }
    if (!callback) {
      delete this._callbacks[ev];
      return this;
    }
    for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
      cb = list[i];
      if (!(cb === callback)) {
        continue;
      }
      list = list.slice();
      list.splice(i, 1);
      this._callbacks[ev] = list;
      break;
    }
    return this;
  };

  return Events;

})();
// Generated by CoffeeScript 1.3.3
var Hoodie,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Hoodie = (function(_super) {

  __extends(Hoodie, _super);

  Hoodie.prototype.modules = {
    my: {
      localStore: "LocalStore",
      config: "Config",
      account: "Account",
      remoteStore: "RemoteStore"
    },
    email: "Email",
    sharing: "Sharing"
  };

  function Hoodie(baseUrl) {
    this.baseUrl = baseUrl != null ? baseUrl : '';
    this.baseUrl = this.baseUrl.replace(/\/+$/, '');
    this._loadModules();
  }

  Hoodie.prototype.request = function(type, path, options) {
    var defaults;
    if (options == null) {
      options = {};
    }
    defaults = {
      type: type,
      url: "" + this.baseUrl + path,
      xhrFields: {
        withCredentials: true
      },
      crossDomain: true,
      dataType: 'json'
    };
    return $.ajax($.extend(defaults, options));
  };

  Hoodie.prototype.defer = $.Deferred;

  Hoodie.prototype.isPromise = function(obj) {
    return typeof obj.done === 'function' && typeof obj.fail === 'function';
  };

  Hoodie.prototype._loadModules = function(context, modules) {
    var instanceName, moduleName, namespace, _results;
    if (context == null) {
      context = this;
    }
    if (modules == null) {
      modules = this.modules;
    }
    _results = [];
    for (instanceName in modules) {
      moduleName = modules[instanceName];
      if (typeof moduleName === 'string') {
        _results.push(context[instanceName] = new Hoodie[moduleName](this));
      } else {
        namespace = instanceName;
        context[namespace] = {};
        _results.push(this._loadModules(context[namespace], modules[namespace]));
      }
    }
    return _results;
  };

  return Hoodie;

})(Events);
// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Hoodie.Account = (function() {

  Account.prototype.username = void 0;

  function Account(hoodie) {
    this.hoodie = hoodie;
    this._handleSignOut = __bind(this._handleSignOut, this);

    this._handleSignIn = __bind(this._handleSignIn, this);

    this.authenticate = __bind(this.authenticate, this);

    this.username = this.hoodie.my.config.get('_account.username');
    this.on('signin', this._handleSignIn);
    this.on('signout', this._handleSignOut);
  }

  Account.prototype.authenticate = function() {
    var defer,
      _this = this;
    defer = this.hoodie.defer();
    if (!this.username) {
      return defer.reject().promise();
    }
    if (this._authenticated === true) {
      return defer.resolve(this.username).promise();
    }
    if (this._authenticated === false) {
      return defer.reject().promise();
    }
    this._authRequest = this.hoodie.request('GET', "/_session");
    this._authRequest.done(function(response) {
      if (response.userCtx.name) {
        _this._authenticated = true;
        _this.username = response.userCtx.name;
        return defer.resolve(_this.username);
      } else {
        _this._authenticated = false;
        delete _this.username;
        _this.hoodie.trigger('account:error:unauthenticated');
        return defer.reject();
      }
    });
    this._authRequest.fail(function(xhr) {
      var error;
      try {
        error = JSON.parse(xhr.responseText);
      } catch (e) {
        error = {
          error: xhr.responseText || "unknown"
        };
      }
      return defer.reject(error);
    });
    return defer.promise();
  };

  Account.prototype.signUp = function(username, password) {
    var data, defer, handleSucces, key, requestPromise,
      _this = this;
    if (password == null) {
      password = '';
    }
    defer = this.hoodie.defer();
    key = "" + this._prefix + ":" + username;
    data = {
      _id: key,
      name: username,
      type: 'user',
      roles: [],
      password: password
    };
    requestPromise = this.hoodie.request('PUT', "/_users/" + (encodeURIComponent(key)), {
      data: JSON.stringify(data),
      contentType: 'application/json'
    });
    handleSucces = function(response) {
      _this.hoodie.trigger('account:signup', username);
      _this._doc._rev = response.rev;
      return _this.signIn(username, password).then(defer.resolve, defer.reject);
    };
    requestPromise.then(handleSucces, defer.reject);
    return defer.promise();
  };

  Account.prototype.signIn = function(username, password) {
    var defer, handleSucces, requestPromise,
      _this = this;
    if (password == null) {
      password = '';
    }
    defer = this.hoodie.defer();
    requestPromise = this.hoodie.request('POST', '/_session', {
      data: {
        name: username,
        password: password
      }
    });
    handleSucces = function(response) {
      _this.hoodie.trigger('account:signin', username);
      _this.fetch();
      return defer.resolve(username, response);
    };
    requestPromise.then(handleSucces, defer.reject);
    return defer.promise();
  };

  Account.prototype.login = Account.prototype.signIn;

  Account.prototype.changePassword = function(currentPassword, newPassword) {
    var data, defer, key,
      _this = this;
    if (currentPassword == null) {
      currentPassword = '';
    }
    defer = this.hoodie.defer();
    if (!this.username) {
      defer.reject({
        error: "unauthenticated",
        reason: "not logged in"
      });
      return defer.promise();
    }
    key = "" + this._prefix + ":" + this.username;
    data = $.extend({}, this._doc);
    delete data.salt;
    delete data.passwordSha;
    data.password = newPassword;
    return this.hoodie.request('PUT', "/_users/" + (encodeURIComponent(key)), {
      data: JSON.stringify(data),
      contentType: "application/json",
      success: function(response) {
        _this.fetch();
        return defer.resolve();
      },
      error: function(xhr) {
        var error;
        try {
          error = JSON.parse(xhr.responseText);
        } catch (e) {
          error = {
            error: xhr.responseText || "unknown"
          };
        }
        return defer.reject(error);
      }
    });
  };

  Account.prototype.signOut = function() {
    var _this = this;
    return this.hoodie.request('DELETE', '/_session', {
      success: function() {
        return _this.hoodie.trigger('account:signout');
      }
    });
  };

  Account.prototype.logout = Account.prototype.signOut;

  Account.prototype.on = function(event, cb) {
    return this.hoodie.on("account:" + event, cb);
  };

  Account.prototype.db = function() {
    var _ref;
    return (_ref = this.username) != null ? _ref.toLowerCase().replace(/@/, "$").replace(/\./g, "_") : void 0;
  };

  Account.prototype.fetch = function() {
    var defer, key,
      _this = this;
    defer = this.hoodie.defer();
    if (!this.username) {
      defer.reject({
        error: "unauthenticated",
        reason: "not logged in"
      });
      return defer.promise();
    }
    key = "" + this._prefix + ":" + this.username;
    this.hoodie.request('GET', "/_users/" + (encodeURIComponent(key)), {
      success: function(response) {
        _this._doc = response;
        return defer.resolve(response);
      },
      error: function(xhr) {
        var error;
        try {
          error = JSON.parse(xhr.responseText);
        } catch (e) {
          error = {
            error: xhr.responseText || "unknown"
          };
        }
        return defer.reject(error);
      }
    });
    return defer.promise();
  };

  Account.prototype.destroy = function() {
    var _this = this;
    return this.fetch().pipe(function() {
      var key;
      key = "" + _this._prefix + ":" + _this.username;
      return _this.hoodie.request('DELETE', "/_users/" + (encodeURIComponent(key)) + "?rev=" + _this._doc._rev);
    });
  };

  Account.prototype._prefix = 'org.couchdb.user';

  Account.prototype._doc = {};

  Account.prototype._handleSignIn = function(username) {
    this.username = username;
    this.hoodie.my.config.set('_account.username', this.username);
    return this._authenticated = true;
  };

  Account.prototype._handleSignOut = function() {
    delete this.username;
    this.hoodie.my.config.remove('_account.username');
    return this._authenticated = false;
  };

  return Account;

})();
// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Hoodie.Config = (function() {

  Config.prototype.type = '$config';

  Config.prototype.id = 'hoodie';

  Config.prototype.cache = {};

  function Config(hoodie, options) {
    var _this = this;
    this.hoodie = hoodie;
    if (options == null) {
      options = {};
    }
    this.clear = __bind(this.clear, this);

    if (options.type) {
      this.type = options.type;
    }
    if (options.id) {
      this.id = options.id;
    }
    this.hoodie.my.localStore.load(this.type, this.id).done(function(obj) {
      return _this.cache = obj;
    });
    this.hoodie.on('account:signedOut', this.clear);
  }

  Config.prototype.set = function(key, value) {
    var isSilent, update;
    if (this.cache[key] === value) {
      return;
    }
    this.cache[key] = value;
    update = {};
    update[key] = value;
    isSilent = key.charAt(0) === '_';
    return this.hoodie.my.localStore.update(this.type, this.id, update, {
      silent: isSilent
    });
  };

  Config.prototype.get = function(key) {
    return this.cache[key];
  };

  Config.prototype.clear = function() {
    this.cache = {};
    return this.hoodie.my.localStore.destroy(this.type, this.id);
  };

  Config.prototype.remove = Config.prototype.set;

  return Config;

})();
// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Hoodie.Email = (function() {

  function Email(hoodie) {
    this.hoodie = hoodie;
    this._handleEmailUpdate = __bind(this._handleEmailUpdate, this);

  }

  Email.prototype.send = function(emailAttributes) {
    var attributes, defer,
      _this = this;
    if (emailAttributes == null) {
      emailAttributes = {};
    }
    defer = this.hoodie.defer();
    attributes = $.extend({}, emailAttributes);
    if (!this._isValidEmail(emailAttributes.to)) {
      attributes.error = "Invalid email address (" + (attributes.to || 'empty') + ")";
      return defer.reject(attributes).promise();
    }
    this.hoodie.my.localStore.create('$email', attributes).then(function(obj) {
      return _this._handleEmailUpdate(defer, obj);
    });
    return defer.promise();
  };

  Email.prototype._isValidEmail = function(email) {
    if (email == null) {
      email = '';
    }
    return /@/.test(email);
  };

  Email.prototype._handleEmailUpdate = function(defer, attributes) {
    var _this = this;
    if (attributes == null) {
      attributes = {};
    }
    if (attributes.error) {
      return defer.reject(attributes);
    } else if (attributes.deliveredAt) {
      return defer.resolve(attributes);
    } else {
      return this.hoodie.one("remote:updated:$email:" + attributes.id, function(attributes) {
        return _this._handleEmailUpdate(defer, attributes);
      });
    }
  };

  return Email;

})();
// Generated by CoffeeScript 1.3.3

Hoodie.Errors = {
  INVALID_KEY: function(idOrType) {
    var key;
    key = idOrType.id ? 'id' : 'type';
    return new Error("invalid " + key + " '" + idOrType[key] + "': numbers and lowercase letters allowed only");
  },
  INVALID_ARGUMENTS: function(msg) {
    return new Error(msg);
  },
  NOT_FOUND: function(type, id) {
    return new Error("" + type + " with " + id + " could not be found");
  }
};
