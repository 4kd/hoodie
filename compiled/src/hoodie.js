// Generated by CoffeeScript 1.3.3
var Hoodie,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Hoodie = (function(_super) {

  __extends(Hoodie, _super);

  Hoodie.prototype.modules = function() {
    return {
      my: {
        store: Hoodie.LocalStore,
        config: Hoodie.Config,
        account: Hoodie.Account,
        remote: Hoodie.Account.RemoteStore
      },
      user: Hoodie.User,
      global: Hoodie.Global,
      email: Hoodie.Email,
      share: Hoodie.Share
    };
  };

  function Hoodie(baseUrl) {
    this.baseUrl = baseUrl != null ? baseUrl : '';
    this.baseUrl = this.baseUrl.replace(/\/+$/, '');
    this._loadModules();
  }

  Hoodie.prototype.request = function(type, path, options) {
    var defaults;
    if (options == null) {
      options = {};
    }
    defaults = {
      type: type,
      url: "" + this.baseUrl + path,
      xhrFields: {
        withCredentials: true
      },
      crossDomain: true,
      dataType: 'json'
    };
    return $.ajax($.extend(defaults, options));
  };

  Hoodie.prototype.open = function(store_name, options) {
    if (options == null) {
      options = {};
    }
    $.extend(options, {
      basePath: "/" + (encodeURIComponent(store_name))
    });
    return new Hoodie.RemoteStore(this, options);
  };

  Hoodie.prototype.defer = $.Deferred;

  Hoodie.prototype.isPromise = function(obj) {
    return typeof obj.done === 'function' && typeof obj.resolve === 'undefined';
  };

  Hoodie.prototype._loadModules = function(context, modules) {
    var Module, instanceName, namespace, _results;
    if (context == null) {
      context = this;
    }
    if (modules == null) {
      modules = this.modules();
    }
    _results = [];
    for (instanceName in modules) {
      Module = modules[instanceName];
      if (typeof Module === 'function') {
        _results.push(context[instanceName] = new Module(this));
      } else {
        namespace = instanceName;
        context[namespace] || (context[namespace] = {});
        _results.push(this._loadModules(context[namespace], modules[namespace]));
      }
    }
    return _results;
  };

  return Hoodie;

})(Events);
