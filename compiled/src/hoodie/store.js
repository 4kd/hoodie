// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Hoodie.Store = (function() {

  function Store(hoodie) {
    this.hoodie = hoodie;
    this.clear = __bind(this.clear, this);

    if (!this.isPersistent()) {
      this.db = {
        getItem: function() {
          return null;
        },
        setItem: function() {
          return null;
        },
        removeItem: function() {
          return null;
        },
        key: function() {
          return null;
        },
        length: function() {
          return 0;
        },
        clear: function() {
          return null;
        }
      };
    }
    this.hoodie.on('account:signOut', this.clear);
  }

  Store.prototype.db = {
    getItem: function(key) {
      return window.localStorage.getItem(key);
    },
    setItem: function(key, value) {
      return window.localStorage.setItem(key, value);
    },
    removeItem: function(key) {
      return window.localStorage.removeItem(key);
    },
    key: function(nr) {
      return window.localStorage.key(nr);
    },
    length: function() {
      return window.localStorage.length;
    },
    clear: function() {
      return window.localStorage.clear();
    }
  };

  Store.prototype.save = function(type, id, object, options) {
    var defer, isNew;
    if (options == null) {
      options = {};
    }
    defer = this.hoodie.defer();
    if (typeof object !== 'object') {
      defer.reject(Hoodie.Errors.INVALID_ARGUMENTS("object is " + (typeof object)));
      return defer.promise();
    }
    object = $.extend({}, object);
    if (id && !this._isValidId(id)) {
      return defer.reject(Hoodie.Errors.INVALID_KEY({
        id: id
      })).promise();
    }
    if (!this._isValidType(type)) {
      return defer.reject(Hoodie.Errors.INVALID_KEY({
        type: type
      })).promise();
    }
    if (id) {
      isNew = typeof this._cached["" + type + "/" + id] !== 'object';
    } else {
      isNew = true;
      id = this.uuid();
    }
    if (options.remote) {
      object._syncedAt = this._now();
    } else if (!options.silent) {
      object.updatedAt = this._now();
      object.createdAt || (object.createdAt = object.updatedAt);
    }
    delete object.id;
    delete object.type;
    try {
      object = this.cache(type, id, object, options);
      defer.resolve(object, isNew).promise();
    } catch (error) {
      defer.reject(error).promise();
    }
    return defer.promise();
  };

  Store.prototype.create = function(type, object, options) {
    if (options == null) {
      options = {};
    }
    return this.save(type, void 0, object);
  };

  Store.prototype.update = function(type, id, objectUpdate, options) {
    var defer, _loadPromise,
      _this = this;
    if (options == null) {
      options = {};
    }
    defer = this.hoodie.defer();
    _loadPromise = this.load(type, id).pipe(function(currentObj) {
      var changedProperties, key, value;
      if (typeof objectUpdate === 'function') {
        objectUpdate = objectUpdate($.extend({}, currentObj));
      }
      if (!objectUpdate) {
        return defer.resolve(currentObj);
      }
      changedProperties = (function() {
        var _results;
        _results = [];
        for (key in objectUpdate) {
          value = objectUpdate[key];
          if (!(currentObj[key] !== value)) {
            continue;
          }
          currentObj[key] = value;
          _results.push(key);
        }
        return _results;
      })();
      if (!changedProperties.length) {
        return defer.resolve(currentObj);
      }
      return _this.save(type, id, currentObj, options).then(defer.resolve, defer.reject);
    });
    _loadPromise.fail(function() {
      return _this.save(type, id, objectUpdate, options).then(defer.resolve, defer.reject);
    });
    return defer.promise();
  };

  Store.prototype.updateAll = function(filterOrObjects, objectUpdate, options) {
    var promise,
      _this = this;
    if (options == null) {
      options = {};
    }
    if (this.hoodie.isPromise(filterOrObjects)) {
      promise = filterOrObjects;
    } else {
      promise = this.hoodie.defer().resolve(filterOrObjects).resolve();
    }
    return promise.pipe(function(objects) {
      var defer, object, _updatePromises;
      defer = _this.hoodie.defer();
      _updatePromises = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = objects.length; _i < _len; _i++) {
          object = objects[_i];
          _results.push(this.update(object.type, object.id, objectUpdate, options));
        }
        return _results;
      }).call(_this);
      $.when.apply(null, _updatePromises).then(defer.resolve);
      return defer.promise();
    });
  };

  Store.prototype.load = function(type, id) {
    var defer, object;
    defer = this.hoodie.defer();
    if (!(typeof type === 'string' && typeof id === 'string')) {
      return defer.reject(Hoodie.Errors.INVALID_ARGUMENTS("type & id are required")).promise();
    }
    try {
      object = this.cache(type, id);
      if (!object) {
        return defer.reject(Hoodie.Errors.NOT_FOUND(type, id)).promise();
      }
      defer.resolve(object);
    } catch (error) {
      defer.reject(error);
    }
    return defer.promise();
  };

  Store.prototype.loadAll = function(filter) {
    var currentType, defer, id, key, keys, obj, results, type;
    if (filter == null) {
      filter = function() {
        return true;
      };
    }
    defer = this.hoodie.defer();
    keys = this._index();
    if (typeof filter === 'string') {
      type = filter;
      filter = function(obj) {
        return obj.type === type;
      };
    }
    try {
      results = (function() {
        var _i, _len, _ref, _results;
        _results = [];
        for (_i = 0, _len = keys.length; _i < _len; _i++) {
          key = keys[_i];
          if (!(this._isSemanticId(key))) {
            continue;
          }
          _ref = key.split('/'), currentType = _ref[0], id = _ref[1];
          obj = this.cache(currentType, id);
          if (filter(obj)) {
            _results.push(obj);
          } else {
            continue;
          }
        }
        return _results;
      }).call(this);
      defer.resolve(results).promise();
    } catch (error) {
      defer.reject(error).promise();
    }
    return defer.promise();
  };

  Store.prototype["delete"] = function(type, id, options) {
    var defer, key, object;
    if (options == null) {
      options = {};
    }
    defer = this.hoodie.defer();
    object = this.cache(type, id);
    if (!object) {
      return defer.reject(Hoodie.Errors.NOT_FOUND(type, id)).promise();
    }
    if (object._syncedAt && !options.remote) {
      object._deleted = true;
      this.cache(type, id, object);
    } else {
      key = "" + type + "/" + id;
      this.db.removeItem(key);
      this._cached[key] = false;
      this.clearChanged(type, id);
    }
    return defer.resolve($.extend({}, object)).promise();
  };

  Store.prototype.destroy = Store.prototype["delete"];

  Store.prototype.cache = function(type, id, object, options) {
    var key;
    if (object == null) {
      object = false;
    }
    if (options == null) {
      options = {};
    }
    key = "" + type + "/" + id;
    if (object) {
      this._cached[key] = $.extend(object, {
        type: type,
        id: id
      });
      this._setObject(type, id, object);
      if (options.remote) {
        this.clearChanged(type, id);
        return $.extend({}, this._cached[key]);
      }
    } else {
      if (this._cached[key] != null) {
        return $.extend({}, this._cached[key]);
      }
      this._cached[key] = this._getObject(type, id);
    }
    if (this._cached[key] && (this._isDirty(this._cached[key]) || this._isMarkedAsDeleted(this._cached[key]))) {
      this.markAsChanged(type, id, this._cached[key]);
    } else {
      this.clearChanged(type, id);
    }
    if (this._cached[key]) {
      return $.extend({}, this._cached[key]);
    } else {
      return this._cached[key];
    }
  };

  Store.prototype.clearChanged = function(type, id) {
    var key;
    if (type && id) {
      key = "" + type + "/" + id;
      delete this._dirty[key];
    } else {
      this._dirty = {};
    }
    return this.hoodie.trigger('store:dirty');
  };

  Store.prototype.isMarkedAsDeleted = function(type, id) {
    return this._isMarkedAsDeleted(this.cache(type, id));
  };

  Store.prototype.markAsChanged = function(type, id, object) {
    var key, timeout,
      _this = this;
    key = "" + type + "/" + id;
    this._dirty[key] = object;
    this.hoodie.trigger('store:dirty');
    timeout = 2000;
    window.clearTimeout(this._dirtyTimeout);
    return this._dirtyTimeout = window.setTimeout((function() {
      return _this.hoodie.trigger('store:dirty:idle');
    }), timeout);
  };

  Store.prototype.changedDocs = function() {
    var key, object, _ref, _results;
    _ref = this._dirty;
    _results = [];
    for (key in _ref) {
      object = _ref[key];
      _results.push(object);
    }
    return _results;
  };

  Store.prototype.isDirty = function(type, id) {
    if (!type) {
      return $.isEmptyObject(this._dirty);
    }
    return this._isDirty(this.cache(type, id));
  };

  Store.prototype.clear = function() {
    var defer;
    defer = this.hoodie.defer();
    try {
      this.db.clear();
      this._cached = {};
      this.clearChanged();
      defer.resolve();
    } catch (error) {
      defer.reject(error);
    }
    return defer.promise();
  };

  Store.prototype.isPersistent = function() {
    try {
      if (!window.localStorage) {
        return false;
      }
      localStorage.setItem('Storage-Test', "1");
      if (localStorage.getItem('Storage-Test') !== "1") {
        return false;
      }
      localStorage.removeItem('Storage-Test');
    } catch (e) {
      return false;
    }
    return true;
  };

  Store.prototype.uuid = function(len) {
    var chars, i, radix;
    if (len == null) {
      len = 7;
    }
    chars = '0123456789abcdefghijklmnopqrstuvwxyz'.split('');
    radix = chars.length;
    return ((function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; 0 <= len ? _i < len : _i > len; i = 0 <= len ? ++_i : --_i) {
        _results.push(chars[0 | Math.random() * radix]);
      }
      return _results;
    })()).join('');
  };

  Store.prototype._setObject = function(type, id, object) {
    var key, store;
    key = "" + type + "/" + id;
    store = $.extend({}, object);
    delete store.type;
    delete store.id;
    return this.db.setItem(key, JSON.stringify(store));
  };

  Store.prototype._getObject = function(type, id) {
    var json, key, obj;
    key = "" + type + "/" + id;
    json = this.db.getItem(key);
    if (json) {
      obj = JSON.parse(json);
      obj.type = type;
      obj.id = id;
      if (obj.createdAt) {
        obj.createdAt = new Date(Date.parse(obj.createdAt));
      }
      if (obj.updatedAt) {
        obj.updatedAt = new Date(Date.parse(obj.updatedAt));
      }
      if (obj._syncedAt) {
        obj._syncedAt = new Date(Date.parse(obj._syncedAt));
      }
      return obj;
    } else {
      return false;
    }
  };

  Store.prototype._now = function() {
    return new Date;
  };

  Store.prototype._isValidId = function(key) {
    return /^[a-z0-9\-]+$/.test(key);
  };

  Store.prototype._isValidType = function(key) {
    return /^[a-z$][a-z0-9]+$/.test(key);
  };

  Store.prototype._isSemanticId = function(key) {
    return /^[a-z$][a-z0-9]+\/[a-z0-9]+$/.test(key);
  };

  Store.prototype._cached = {};

  Store.prototype._dirty = {};

  Store.prototype._isDirty = function(object) {
    if (!object._syncedAt) {
      return true;
    }
    if (!object.updatedAt) {
      return false;
    }
    return object._syncedAt.getTime() < object.updatedAt.getTime();
  };

  Store.prototype._isMarkedAsDeleted = function(object) {
    return object._deleted === true;
  };

  Store.prototype._index = function() {
    var i, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = this.db.length(); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      _results.push(this.db.key(i));
    }
    return _results;
  };

  return Store;

})();
