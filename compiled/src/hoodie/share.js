// Generated by CoffeeScript 1.3.3

Hoodie.Share = (function() {

  function Share(hoodie) {
    this.hoodie = hoodie;
    Hoodie.Share.Instance.hoodie = this.hoodie;
  }

  Share.prototype.create = function(options) {
    var share;
    if (options == null) {
      options = {};
    }
    share = new Hoodie.Share.Instance(options);
    return share.save();
  };

  Share.prototype.load = function(id) {
    var _this = this;
    return this.hoodie.my.store.load('$share', id).pipe(function(obj) {
      return new Hoodie.Share.Instance(obj);
    });
  };

  Share.prototype.findOrCreate = function(options) {
    var defer,
      _this = this;
    defer = this.hoodie.defer();
    this.load(options.id).done(function(share) {
      return defer.resolve(share);
    }).fail(function() {
      return _this.create(options).then(defer.resolve, defer.reject);
    });
    return defer.promise();
  };

  Share.prototype.destroy = function(id) {
    var _this = this;
    return this.load(id).pipe(function(obj) {
      var share;
      share = new Hoodie.Share.Instance(obj);
      return share.destroy();
    });
  };

  Share.prototype["delete"] = Share.prototype.destroy;

  Share.prototype.open = function(id, options) {
    if (options == null) {
      options = {};
    }
  };

  return Share;

})();
