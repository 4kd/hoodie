// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Hoodie.Account = (function() {

  Account.prototype.username = void 0;

  function Account(hoodie) {
    this.hoodie = hoodie;
    this._handleSignOut = __bind(this._handleSignOut, this);

    this._handleSignIn = __bind(this._handleSignIn, this);

    this.authenticate = __bind(this.authenticate, this);

    this.username = this.hoodie.my.config.get('_account.username');
    this.owner = this.hoodie.my.config.get('_account.owner');
    if (!this.owner) {
      this.owner = this.hoodie.my.store.uuid();
      this.hoodie.my.config.set('_account.owner', this.owner);
    }
    this.on('signin', this._handleSignIn);
    this.on('signout', this._handleSignOut);
  }

  Account.prototype.authenticate = function() {
    var defer,
      _this = this;
    defer = this.hoodie.defer();
    if (!this.username) {
      return defer.reject().promise();
    }
    if (this._authenticated === true) {
      return defer.resolve(this.username).promise();
    }
    if (this._authenticated === false) {
      return defer.reject().promise();
    }
    this._authRequest = this.hoodie.request('GET', "/_session");
    this._authRequest.done(function(response) {
      if (response.userCtx.name) {
        _this._authenticated = true;
        _this.username = response.userCtx.name;
        return defer.resolve(_this.username);
      } else {
        _this._authenticated = false;
        delete _this.username;
        _this.hoodie.trigger('account:error:unauthenticated');
        return defer.reject();
      }
    });
    this._authRequest.fail(function(xhr) {
      var error;
      try {
        error = JSON.parse(xhr.responseText);
      } catch (e) {
        error = {
          error: xhr.responseText || "unknown"
        };
      }
      return defer.reject(error);
    });
    return defer.promise();
  };

  Account.prototype.signUp = function(username, password) {
    var data, defer, handleSucces, key, requestPromise,
      _this = this;
    if (password == null) {
      password = '';
    }
    defer = this.hoodie.defer();
    key = "" + this._prefix + ":" + username;
    data = {
      _id: key,
      name: username,
      type: 'user',
      roles: [],
      password: password,
      $owner: this.owner,
      database: this.db()
    };
    requestPromise = this.hoodie.request('PUT', "/_users/" + (encodeURIComponent(key)), {
      data: JSON.stringify(data),
      contentType: 'application/json'
    });
    handleSucces = function(response) {
      _this.hoodie.trigger('account:signup', username);
      _this._doc._rev = response.rev;
      return _this.signIn(username, password).then(defer.resolve, defer.reject);
    };
    requestPromise.then(handleSucces, defer.reject);
    return defer.promise();
  };

  Account.prototype.signIn = function(username, password) {
    var defer, handleSucces, requestPromise,
      _this = this;
    if (password == null) {
      password = '';
    }
    defer = this.hoodie.defer();
    requestPromise = this.hoodie.request('POST', '/_session', {
      data: {
        name: username,
        password: password
      }
    });
    handleSucces = function(response) {
      _this.hoodie.trigger('account:signin', username);
      _this.fetch();
      return defer.resolve(username, response);
    };
    requestPromise.then(handleSucces, defer.reject);
    return defer.promise();
  };

  Account.prototype.login = Account.prototype.signIn;

  Account.prototype.changePassword = function(currentPassword, newPassword) {
    var data, defer, key,
      _this = this;
    if (currentPassword == null) {
      currentPassword = '';
    }
    defer = this.hoodie.defer();
    if (!this.username) {
      defer.reject({
        error: "unauthenticated",
        reason: "not logged in"
      });
      return defer.promise();
    }
    key = "" + this._prefix + ":" + this.username;
    data = $.extend({}, this._doc);
    delete data.salt;
    delete data.passwordSha;
    data.password = newPassword;
    return this.hoodie.request('PUT', "/_users/" + (encodeURIComponent(key)), {
      data: JSON.stringify(data),
      contentType: "application/json",
      success: function(response) {
        _this.fetch();
        return defer.resolve();
      },
      error: function(xhr) {
        var error;
        try {
          error = JSON.parse(xhr.responseText);
        } catch (e) {
          error = {
            error: xhr.responseText || "unknown"
          };
        }
        return defer.reject(error);
      }
    });
  };

  Account.prototype.signOut = function() {
    var _this = this;
    return this.hoodie.request('DELETE', '/_session', {
      success: function() {
        return _this.hoodie.trigger('account:signout');
      }
    });
  };

  Account.prototype.logout = Account.prototype.signOut;

  Account.prototype.on = function(event, cb) {
    return this.hoodie.on("account:" + event, cb);
  };

  Account.prototype.db = function() {
    return "user/" + this.owner;
  };

  Account.prototype.fetch = function() {
    var defer, key,
      _this = this;
    defer = this.hoodie.defer();
    if (!this.username) {
      defer.reject({
        error: "unauthenticated",
        reason: "not logged in"
      });
      return defer.promise();
    }
    key = "" + this._prefix + ":" + this.username;
    this.hoodie.request('GET', "/_users/" + (encodeURIComponent(key)), {
      success: function(response) {
        _this._doc = response;
        return defer.resolve(response);
      },
      error: function(xhr) {
        var error;
        try {
          error = JSON.parse(xhr.responseText);
        } catch (e) {
          error = {
            error: xhr.responseText || "unknown"
          };
        }
        return defer.reject(error);
      }
    });
    return defer.promise();
  };

  Account.prototype.destroy = function() {
    var _this = this;
    return this.fetch().pipe(function() {
      var key;
      key = "" + _this._prefix + ":" + _this.username;
      return _this.hoodie.request('DELETE', "/_users/" + (encodeURIComponent(key)) + "?rev=" + _this._doc._rev);
    });
  };

  Account.prototype._prefix = 'org.couchdb.user';

  Account.prototype._doc = {};

  Account.prototype._handleSignIn = function(username) {
    this.username = username;
    this.hoodie.my.config.set('_account.username', this.username);
    return this._authenticated = true;
  };

  Account.prototype._handleSignOut = function() {
    delete this.username;
    this.hoodie.my.config.remove('_account.username');
    this.hoodie.my.config.remove('_account.owner');
    return this._authenticated = false;
  };

  return Account;

})();
