// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define('hoodie/sharing/instance', ['hoodie/config', 'hoodie/sharing/hoodie'], function(Config, SharingHoodie) {
  var SharingInstance;
  return SharingInstance = (function() {

    SharingInstance.hoodie = null;

    SharingInstance.create = function(options) {
      var sharing;
      sharing = new this(options);
      return sharing.create();
    };

    SharingInstance.load = function(id) {
      var _this = this;
      return this.hoodie.store.load('$sharing', id).pipe(function(obj) {
        return new _this(obj);
      });
    };

    SharingInstance.destroy = function(id) {
      var _this = this;
      return this.load(id).pipe(function(obj) {
        var sharing;
        sharing = new _this(obj);
        return sharing.destroy();
      });
    };

    SharingInstance.prototype.anonymous = void 0;

    function SharingInstance(attributes) {
      if (attributes == null) {
        attributes = {};
      }
      this._is_my_shared_object_and_changed = __bind(this._is_my_shared_object_and_changed, this);

      this.hoodie = this.constructor.hoodie;
      this.anonymous = this.hoodie.account.username === void 0;
      this.id = attributes.id || this.hoodie.store.uuid(7);
      this.attributes(attributes);
      this.config = new Config(this.hoodie, {
        type: '$sharing',
        id: this.id
      });
      if (attributes.objects) {
        this.add(attributes.objects);
      }
      if (this.anonymous) {
        this.hoodie = new SharingHoodie(this.hoodie, this);
        if (!this.continuous) {
          this.hoodie.unbind('account:signed_in', this.hoodie.remote.connect);
          this.hoodie.unbind('account:signed_out', this.hoodie.remote.disconnect);
        }
      }
    }

    SharingInstance.prototype.owner_uuid = function() {
      var config;
      config = this.constructor.hoodie.config;
      return config.get('sharing.owner_uuid') || config.set('sharing.owner_uuid', this.constructor.hoodie.store.uuid());
    };

    SharingInstance.prototype.attributes = function(update) {
      if (update) {
        if (update["private"]) {
          this["private"] = update["private"];
        }
        if (update.invitees) {
          this.invitees = update.invitees;
        }
        if (update.continuous) {
          this.continuous = update.continuous;
        }
        if (update.collaborative) {
          this.collaborative = update.collaborative;
        }
        if (update.password) {
          this.password = update.password;
        }
        if (update._user_rev) {
          this._user_rev = update._user_rev;
        }
        if (this.invitees != null) {
          this["private"] = true;
        }
        this.password || (this.password = this.id);
      }
      return {
        owner_uuid: this.owner_uuid(),
        "private": this["private"],
        invitees: this.invitees,
        continuous: this.continuous,
        collaborative: this.collaborative,
        password: this.password,
        _user_rev: this._user_rev
      };
    };

    SharingInstance.prototype.create = function() {
      var defer,
        _this = this;
      defer = this.hoodie.defer();
      this.hoodie.store.save("$sharing", this.id, this.attributes());
      if (this.anonymous) {
        this.hoodie.account.sign_up("sharing/" + this.id, this.password).done(function(username, response) {
          _this._user_rev = response.rev;
          _this.config.set('_user_rev', _this._user_rev);
          return defer.resolve(_this);
        }).fail(function(error) {
          defer.reject(error);
          if (error.error === 'conflict') {
            return alert("sharing/" + _this.id + " has been shared before");
          }
        });
      } else {
        this.hoodie.one("remote:updated:$sharing:" + this.id, defer.resolve);
      }
      return defer.promise();
    };

    SharingInstance.prototype.add = function(objects) {
      return this.toggle(objects, true);
    };

    SharingInstance.prototype.remove = function(objects) {
      return this.toggle(objects, false);
    };

    SharingInstance.prototype.toggle = function(objects, do_add) {
      var update;
      if (!this.hoodie.isPromise(objects)) {
        if (!$.isArray(objects)) {
          objects = [objects];
        }
      }
      update = (function() {
        var _this = this;
        switch (do_add) {
          case true:
            return function(obj) {
              obj.$sharings || (obj.$sharings = []);
              return obj.$sharings.push(_this.id);
            };
          case false:
            return function(obj) {
              var idx;
              try {
                idx = obj.$sharings.indexOf(_this.id);
                if (~idx) {
                  return obj.$sharings.splice(idx, 1);
                }
              } catch (_error) {}
            };
          default:
            return function(obj) {
              var idx;
              idx = -1;
              try {
                idx = obj.$sharings.indexOf(_this.id);
              } catch (_error) {}
              if (~idx) {
                return obj.$sharings.splice(idx, 1);
              } else {
                obj.$sharings || (obj.$sharings = []);
                return obj.$sharings.push(_this.id);
              }
            };
        }
      }).call(this);
      return this.hoodie.store.updateAll(objects, update);
    };

    SharingInstance.prototype.sync = function() {
      return this.hoodie.store.loadAll(this._is_my_shared_object_and_changed).pipe(this.hoodie.remote.sync);
    };

    SharingInstance.prototype._is_my_shared_object_and_changed = function(obj) {
      return obj.$sharings && ~obj.$sharings.indexOf(this.id) && this.hoodie.store.is_dirty(obj.type, obj.id);
    };

    return SharingInstance;

  })();
});
