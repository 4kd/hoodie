// Generated by CoffeeScript 1.3.3

define('hoodie/sharing/instance', ['hoodie/config', 'hoodie/sharing/hoodie'], function(Config, SharingHoodie) {
  var SharingInstance;
  return SharingInstance = (function() {

    SharingInstance.hoodie = null;

    SharingInstance.create = function(options) {
      var sharing;
      sharing = new this(options);
      return sharing.create();
    };

    SharingInstance.load = function(id) {
      var _this = this;
      return this.hoodie.store.load('$sharing', id).pipe(function(obj) {
        return new _this(obj);
      });
    };

    SharingInstance.destroy = function(id) {
      var _this = this;
      return this.load(id).pipe(function(obj) {
        var sharing;
        sharing = new _this(obj);
        return sharing.destroy();
      });
    };

    SharingInstance.prototype.anonymous = void 0;

    function SharingInstance(attributes) {
      if (attributes == null) {
        attributes = {};
      }
      this.hoodie = this.constructor.hoodie;
      this.anonymous = this.hoodie.account.username === void 0;
      this.id = attributes.id || this.hoodie.store.uuid(7);
      this.attributes(attributes);
      this.config = new Config(this.hoodie, {
        type: '$sharing',
        id: this.id
      });
      if (this.anonymous) {
        this.hoodie = new SharingHoodie(this.hoodie, this);
        if (!this.continuous) {
          this.hoodie.unbind('account:signed_in', this.hoodie.remote.connect);
          this.hoodie.unbind('account:signed_out', this.hoodie.remote.disconnect);
        }
      }
    }

    SharingInstance.prototype.owner_uuid = function() {
      var config;
      config = this.constructor.hoodie.config;
      return config.get('sharing.owner_uuid') || config.set('sharing.owner_uuid', this.constructor.hoodie.store.uuid());
    };

    SharingInstance.prototype.attributes = function(update) {
      if (update) {
        if (update["private"]) {
          this["private"] = update["private"];
        }
        if (update.invitees) {
          this.invitees = update.invitees;
        }
        if (update.continuous) {
          this.continuous = update.continuous;
        }
        if (update.collaborative) {
          this.collaborative = update.collaborative;
        }
        if (update.password) {
          this.password = update.password;
        }
        if (update.filters) {
          this.filters = update.filters;
        }
        if (update._user_rev) {
          this._user_rev = update._user_rev;
        }
        if (this.invitees != null) {
          this["private"] = true;
        }
        this.password || (this.password = this.id);
      }
      return {
        owner_uuid: this.owner_uuid(),
        "private": this["private"],
        invitees: this.invitees,
        continuous: this.continuous,
        collaborative: this.collaborative,
        password: this.password,
        filter: this._turn_filters_into_function(this.filters),
        _user_rev: this._user_rev
      };
    };

    SharingInstance.prototype.create = function() {
      var defer,
        _this = this;
      defer = this.hoodie.defer();
      this.hoodie.store.save("$sharing", this.id, this.attributes());
      if (this.anonymous) {
        this.hoodie.account.sign_up("sharing/" + this.id, this.password).done(function(username, response) {
          _this._user_rev = response.rev;
          _this.config.set('_user_rev', _this._user_rev);
          return defer.resolve(_this);
        }).fail(function(error) {
          defer.reject(error);
          if (error.error === 'conflict') {
            return alert("sharing/" + _this.id + " has been shared before");
          }
        });
      } else {
        this.hoodie.one("remote:updated:$sharing:" + this.id, defer.resolve);
      }
      return defer.promise();
    };

    SharingInstance.prototype._turn_filters_into_function = function(filters) {
      var all_conditions, current_condition, filter, key, value, _i, _len;
      if (!filters) {
        return;
      }
      all_conditions = [];
      for (_i = 0, _len = filters.length; _i < _len; _i++) {
        filter = filters[_i];
        current_condition = [];
        for (key in filter) {
          value = filter[key];
          if (/'/.test("" + key + value)) {
            continue;
          }
          if (typeof value === 'string') {
            current_condition.push("obj['" + key + "'] == '" + value + "'");
          } else {
            current_condition.push("obj['" + key + "'] == " + value);
          }
        }
        all_conditions.push(current_condition.join(" && "));
      }
      return "function(obj) { return " + (all_conditions.join(" || ")) + " }";
    };

    return SharingInstance;

  })();
});
