// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  __slice = [].slice;

Hoodie.ShareInstance = (function(_super) {

  __extends(ShareInstance, _super);

  ShareInstance.prototype.access = false;

  function ShareInstance(options) {
    if (options == null) {
      options = {};
    }
    this._isMySharedObjectAndChanged = __bind(this._isMySharedObjectAndChanged, this);

    this._isMySharedObject = __bind(this._isMySharedObject, this);

    this._toggle = __bind(this._toggle, this);

    this._remove = __bind(this._remove, this);

    this._add = __bind(this._add, this);

    this.findAllObjects = __bind(this.findAllObjects, this);

    this.destroy = __bind(this.destroy, this);

    this.sync = __bind(this.sync, this);

    this.get = __bind(this.get, this);

    this.set = __bind(this.set, this);

    $.extend(this, options);
    this.set(options);
    this.id || (this.id = this.hoodie.uuid());
  }

  ShareInstance.prototype._memory = {};

  ShareInstance.prototype._allowed_options = ["access", "password"];

  ShareInstance.prototype.set = function(key, value) {
    var _key;
    if (typeof key === 'object') {
      for (_key in key) {
        value = key[_key];
        if (__indexOf.call(this._allowed_options, _key) >= 0) {
          this[_key] = this._memory[_key] = value;
        }
      }
    } else {
      if (__indexOf.call(this._allowed_options, key) >= 0) {
        this[key] = this._memory[key] = value;
      }
    }
    return void 0;
  };

  ShareInstance.prototype.get = function(key) {
    return this[key];
  };

  ShareInstance.prototype.save = function(update, options) {
    var _handleUpdate,
      _this = this;
    if (update == null) {
      update = {};
    }
    if (!this.hoodie.account.hasAccount()) {
      this.hoodie.account.anonymousSignUp();
    }
    if (update) {
      this.set(update);
    }
    _handleUpdate = function(properties, wasCreated) {
      _this._memory = {};
      $.extend(_this, properties);
      return _this;
    };
    return this.hoodie.store.update("$share", this.id, this._memory, options).pipe(_handleUpdate);
  };

  ShareInstance.prototype.add = function(objects, sharedAttributes) {
    if (sharedAttributes == null) {
      sharedAttributes = true;
    }
    return this.toggle(objects, sharedAttributes);
  };

  ShareInstance.prototype.remove = function(objects) {
    return this.toggle(objects, false);
  };

  ShareInstance.prototype.toggle = function(objects, filter) {
    var updateMethod;
    if (!(this.hoodie.isPromise(objects) || $.isArray(objects))) {
      objects = [objects];
    }
    updateMethod = (function() {
      switch (filter) {
        case void 0:
          return this._toggle;
        case false:
          return this._remove;
        default:
          return this._add(filter);
      }
    }).call(this);
    return this.hoodie.store.updateAll(objects, updateMethod);
  };

  ShareInstance.prototype.sync = function() {
    return this.save().pipe(this.findAllObjects).pipe(this.hoodie.remote.sync);
  };

  ShareInstance.prototype.destroy = function() {
    var _this = this;
    return this.remove(this.findAllObjects()).then(function() {
      return _this.hoodie.store.remove("$share", _this.id);
    });
  };

  ShareInstance.prototype.findAllObjects = function() {
    return this.hoodie.store.findAll(this._isMySharedObjectAndChanged);
  };

  ShareInstance.prototype._add = function(filter) {
    var _this = this;
    return function(obj) {
      obj.$shares || (obj.$shares = {});
      obj.$shares[_this.id] = filter;
      return {
        $shares: obj.$shares
      };
    };
  };

  ShareInstance.prototype._remove = function(obj) {
    if (!obj.$shares) {
      return {};
    }
    delete obj.$shares[this.id];
    if ($.isEmptyObject(obj.$shares)) {
      obj.$shares = void 0;
    }
    return {
      $shares: obj.$shares
    };
  };

  ShareInstance.prototype._toggle = function(obj) {
    var doAdd;
    try {
      doAdd = obj.$shares[this.id] === void 0 || obj.$shares[this.id] === false;
    } catch (e) {
      doAdd = true;
    }
    if (doAdd) {
      return this._add(true)(obj);
    } else {
      return this._remove(obj);
    }
  };

  ShareInstance.prototype._isMySharedObject = function(obj) {
    var _ref;
    return ((_ref = obj.$shares) != null ? _ref[this.id] : void 0) != null;
  };

  ShareInstance.prototype._isMySharedObjectAndChanged = function(obj) {
    var belongsToMe, _ref;
    belongsToMe = obj.id === this.id || (((_ref = obj.$shares) != null ? _ref[this.id] : void 0) != null);
    return belongsToMe && this.hoodie.store.isDirty(obj.$type, obj.id);
  };

  ShareInstance.prototype._handleRemoteChanges = function() {
    return console.log.apply(console, ['_handleRemoteChanges'].concat(__slice.call(arguments)));
  };

  return ShareInstance;

})(Hoodie.Remote);
