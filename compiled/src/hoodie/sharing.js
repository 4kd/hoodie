// Generated by CoffeeScript 1.3.1

define('hoodie/sharing', function() {
  var Sharing;
  return Sharing = (function() {

    Sharing.name = 'Sharing';

    function Sharing(hoodie) {
      var _this = this;
      this.hoodie = hoodie;
      require(['hoodie/sharing/instance'], function(SharingInstance) {
        var sharing;
        return sharing = new SharingInstance(_this.hoodie);
      });
    }

    Sharing.prototype.create = function(options) {
      var defer,
        _this = this;
      defer = this.hoodie.defer();
      if (options.invitees != null) {
        options["private"] = true;
      }
      options.filter = this._turn_filters_into_function(options.filters);
      delete options.filters;
      this.hoodie.store.save("$sharing", options.id, options).done(function(sharing) {
        return _this.hoodie.one("remote:created:$sharing:" + sharing.id, defer.resolve);
      });
      return defer.promise();
    };

    Sharing.prototype.destroy = function(id) {
      return this.hoodie.store.destroy("$sharing", id);
    };

    Sharing.prototype["delete"] = Sharing.prototype.destroy;

    Sharing.prototype._turn_filters_into_function = function(filters) {
      var all_conditions, current_condition, filter, key, value, _i, _len;
      if (!filters) {
        return;
      }
      all_conditions = [];
      for (_i = 0, _len = filters.length; _i < _len; _i++) {
        filter = filters[_i];
        current_condition = [];
        for (key in filter) {
          value = filter[key];
          if (/'/.test("" + key + value)) {
            continue;
          }
          if (typeof value === 'string') {
            current_condition.push("obj['" + key + "'] == '" + value + "'");
          } else {
            current_condition.push("obj['" + key + "'] == " + value);
          }
        }
        all_conditions.push(current_condition.join(" && "));
      }
      return "function(obj) { return " + (all_conditions.join(" || ")) + " }";
    };

    return Sharing;

  })();
});
