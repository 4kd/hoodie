// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Hoodie.Share.Remote = (function(_super) {

  __extends(Remote, _super);

  function Remote() {
    this._handlePushSuccess = __bind(this._handlePushSuccess, this);

    this.pull = __bind(this.pull, this);

    this.push = __bind(this.push, this);
    Remote.__super__.constructor.apply(this, arguments);
    this.basePath = "/" + (encodeURIComponent(this.hoodie.my.account.db()));
    if (this.hoodie.share.continuous === true) {
      this._sync = true;
      this.connect();
    }
  }

  Remote.prototype.push = function(docs) {
    var _this = this;
    return this._assureExistingShareAccount(function() {
      var obj;
      if (!$.isArray(docs)) {
        docs = (function() {
          var _i, _len, _ref, _ref1, _results;
          _ref = this.hoodie.my.store.changedDocs();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            obj = _ref[_i];
            if (obj.id === this.hoodie.share.id || ((_ref1 = obj.$shares) != null ? _ref1[this.hoodie.share.id] : void 0)) {
              _results.push(obj);
            }
          }
          return _results;
        }).call(_this);
      }
      return Remote.__super__.push.call(_this, docs);
    });
  };

  Remote.prototype.pull = function() {
    var _this = this;
    return this._assureExistingShareAccount(function() {
      return Remote.__super__.pull.apply(_this, arguments);
    });
  };

  Remote.prototype._assureExistingShareAccount = function(callback) {
    var defer,
      _this = this;
    defer = this.hoodie.defer();
    if (this.hoodie.share.hasAccount()) {
      return defer.resolve().pipe(callback());
    }
    this.hoodie.my.account.signUp("share/" + this.hoodie.share.id, this.hoodie.share.password).done(function(username, response) {
      _this.hoodie.share.save({
        _userRev: _this.hoodie.my.account._doc._rev
      });
      return defer.resolve().pipe(callback());
    });
    return defer.promise();
  };

  Remote.prototype._pullUrl = function() {
    var url;
    url = Remote.__super__._pullUrl.apply(this, arguments);
    return "" + url + "&filter=filters/share";
  };

  Remote.prototype._handlePushSuccess = function(docs, pushedDocs) {
    var _this = this;
    return function() {
      var doc, update, _i, _len, _ref, _ref1;
      for (_i = 0, _len = docs.length; _i < _len; _i++) {
        doc = docs[_i];
        if (((_ref = doc.$shares) != null ? _ref[_this.hoodie.share.id] : void 0) === false) {
          if ((_ref1 = doc.$shares) != null) {
            delete _ref1[_this.hoodie.share.id];
          }
          if ($.isEmptyObject(doc.$shares)) {
            doc.$shares = void 0;
          }
          update = {
            $shares: doc.$shares
          };
          _this.hoodie.my.store.update(type, id, update, {
            remote: true
          });
        }
      }
      return Remote.__super__._handlePushSuccess.call(_this, docs, pushedDocs)();
    };
  };

  Remote.prototype._parseForRemote = function(obj) {
    var attributes;
    attributes = Remote.__super__._parseForRemote.apply(this, arguments);
    if (obj.id === this.hoodie.share.id) {
      return attributes;
    } else {
      attributes._id = "$share/" + this.hoodie.share.id + "/" + attributes._id;
      if (attributes.$shares[this.hoodie.share.id] === false) {
        attributes._deleted = true;
      }
      return attributes;
    }
  };

  return Remote;

})(Hoodie.RemoteStore);
