// Generated by CoffeeScript 1.3.3

define('specs/hoodie/sharing/instance', ['mocks/hoodie', 'hoodie/sharing/instance'], function(HoodieMock, SharingInstance) {
  return describe("SharingInstance", function() {
    beforeEach(function() {
      this.hoodie = new HoodieMock;
      SharingInstance.hoodie = this.hoodie;
      return this.sharing = new SharingInstance;
    });
    describe("constructor", function() {
      return it("should set private to true when invitees passed", function() {
        var sharing;
        sharing = new SharingInstance({
          invitees: ['joe@example.com', 'bill@example.com']
        });
        return expect(sharing["private"]).toBeTruthy();
      });
    });
    describe(".owner_uuid()", function() {
      _when("config.sharing.owner_uuid is set to 'owner67'", function() {
        beforeEach(function() {
          return spyOn(SharingInstance.hoodie.config, "get").andCallFake(function(key) {
            if (key === 'sharing.owner_uuid') {
              return 'owner67';
            }
          });
        });
        return it("should return 'owner67", function() {
          return expect(this.sharing.owner_uuid()).toBe('owner67');
        });
      });
      return _when("config.sharing.owner_uuid is not set", function() {
        beforeEach(function() {
          spyOn(SharingInstance.hoodie.config, "get").andReturn(void 0);
          spyOn(SharingInstance.hoodie.config, "set").andCallFake(function(key, value) {
            return value;
          });
          return spyOn(SharingInstance.hoodie.store, "uuid").andReturn('newuuid123');
        });
        it("should return a new uuid", function() {
          return expect(this.sharing.owner_uuid()).toBe('newuuid123');
        });
        return it("should store the new owner_uuid in config", function() {
          this.sharing.owner_uuid();
          return expect(SharingInstance.hoodie.config.set).wasCalledWith('sharing.owner_uuid', 'newuuid123');
        });
      });
    });
    return describe(".attributes(options)", function() {
      it("should add the owner_uuid as attribute", function() {
        spyOn(this.sharing, "owner_uuid").andReturn('owner987');
        return expect(this.sharing.attributes().owner_uuid).toBe('owner987');
      });
      it("should turn passed filters into a stringified fuction", function() {
        var attributes;
        attributes = this.sharing.attributes({
          filters: [
            {
              shared: true,
              "public": true,
              price: 0,
              autor: "Joe Doe"
            }
          ]
        });
        return expect(attributes.filter).toBe("function(obj) { return obj['shared'] == true && obj['public'] == true && obj['price'] == 0 && obj['autor'] == 'Joe Doe' }");
      });
      return it("should add owner_uuid to the options", function() {});
    });
  });
});
