// Generated by CoffeeScript 1.3.3

describe("Hoodie.Share", function() {
  beforeEach(function() {
    this.hoodie = new Mocks.Hoodie;
    this.share = new Hoodie.Share(this.hoodie);
    return spyOn(this.share, "instance");
  });
  describe("constructor", function() {
    return it("should set Hoodie.ShareInstance.prototype.hoodie", function() {
      var instance;
      new Hoodie.Share(this.hoodie);
      instance = new Hoodie.ShareInstance;
      return expect(instance.hoodie).toBe(this.hoodie);
    });
  });
  describe("direct call", function() {
    beforeEach(function() {
      return spyOn(this.hoodie, "open");
    });
    return it("should proxy to hoodie.open('share/' + shareId, {prefix: 'share/shareId'}) and pass options", function() {
      this.share('funk123', {
        option: 'value'
      });
      return expect(this.hoodie.open).wasCalledWith('share/funk123', {
        prefix: 'share/funk123',
        option: 'value'
      });
    });
  });
  describe("#instance", function() {
    return it("should point to Hoodie.ShareInstance", function() {
      var share;
      share = new Hoodie.Share(this.hoodie);
      return expect(share.instance).toBe(Hoodie.ShareInstance);
    });
  });
  describe("#add(attributes)", function() {
    beforeEach(function() {
      this.instance = jasmine.createSpy("instance");
      this.instance.save = jasmine.createSpy("save");
      return this.share.instance.andReturn(this.instance);
    });
    return it("should initiate a new Hoodie.ShareInstance and save it", function() {
      var returnValue;
      returnValue = this.share.add({
        funky: 'fresh'
      });
      expect(this.share.instance).wasCalledWith({
        funky: 'fresh'
      });
      expect(this.instance.save).wasCalled();
      return expect(returnValue).toBe(this.instance);
    });
  });
  describe("#find(share_id)", function() {
    beforeEach(function() {
      var promise;
      promise = this.hoodie.defer().resolve({
        funky: 'fresh'
      }).promise();
      spyOn(this.hoodie.store, "find").andReturn(promise);
      return this.share.instance.andCallFake(function() {
        return this.foo = 'bar';
      });
    });
    it("should proxy to store.find('$share', share_id)", function() {
      var promise;
      promise = this.share.find('123');
      return expect(this.hoodie.store.find).wasCalledWith('$share', '123');
    });
    return it("should resolve with a Share Instance", function() {
      var promise;
      this.hoodie.store.find.andReturn(this.hoodie.defer().resolve({}).promise());
      this.share.instance.andCallFake(function() {
        return this.foo = 'bar';
      });
      promise = this.share.find('123');
      return expect(promise).toBeResolvedWith({
        foo: 'bar'
      });
    });
  });
  describe("#findOrAdd(id, share_attributes)", function() {
    beforeEach(function() {
      return spyOn(this.hoodie.store, "findOrAdd").andCallThrough();
    });
    it("should proxy to hoodie.store.findOrAdd with type set to '$share'", function() {
      this.share.findOrAdd('id123', {});
      return expect(this.hoodie.store.findOrAdd).wasCalledWith('$share', 'id123', {});
    });
    return it("should resolve with a Share Instance", function() {
      var promise;
      this.hoodie.store.findOrAdd.andReturn(this.hoodie.defer().resolve({}).promise());
      this.share.instance.andCallFake(function() {
        return this.foo = 'bar';
      });
      promise = this.share.findOrAdd('id123', {});
      return expect(promise).toBeResolvedWith({
        foo: 'bar'
      });
    });
  });
  describe("#findAll()", function() {
    beforeEach(function() {
      return spyOn(this.hoodie.store, "findAll").andCallThrough();
    });
    it("should proxy to hoodie.store.findAll('$share')", function() {
      this.hoodie.store.findAll.andCallThrough();
      this.share.findAll();
      return expect(this.hoodie.store.findAll).wasCalledWith('$share');
    });
    return it("should resolve with an array of Share instances", function() {
      var promise;
      this.hoodie.store.findAll.andReturn(this.hoodie.defer().resolve([{}, {}]).promise());
      this.share.instance.andCallFake(function() {
        return this.foo = 'bar';
      });
      promise = this.share.findAll();
      return expect(promise).toBeResolvedWith([
        {
          foo: 'bar'
        }, {
          foo: 'bar'
        }
      ]);
    });
  });
  describe("#save('share_id', attributes)", function() {
    beforeEach(function() {
      return spyOn(this.hoodie.store, "save").andCallThrough();
    });
    it("should proxy to hoodie.store.save('$share', 'share_id', attributes)", function() {
      this.share.save('abc4567', {
        funky: 'fresh'
      });
      return expect(this.hoodie.store.save).wasCalledWith('$share', 'abc4567', {
        funky: 'fresh'
      });
    });
    return it("should resolve with a Share Instance", function() {
      var promise;
      this.hoodie.store.save.andReturn(this.hoodie.defer().resolve({}).promise());
      this.share.instance.andCallFake(function() {
        return this.foo = 'bar';
      });
      promise = this.share.save({});
      return expect(promise).toBeResolvedWith({
        foo: 'bar'
      });
    });
  });
  describe("#update('share_id', changed_attributes)", function() {
    beforeEach(function() {
      return spyOn(this.hoodie.store, "update").andCallThrough();
    });
    it("should proxy to hoodie.store.update('$share', 'share_id', attributes)", function() {
      this.share.update('abc4567', {
        funky: 'fresh'
      });
      return expect(this.hoodie.store.update).wasCalledWith('$share', 'abc4567', {
        funky: 'fresh'
      });
    });
    return it("should resolve with a Share Instance", function() {
      var promise;
      this.hoodie.store.update.andReturn(this.hoodie.defer().resolve({}).promise());
      this.share.instance.andCallFake(function() {
        return this.foo = 'bar';
      });
      promise = this.share.update({});
      return expect(promise).toBeResolvedWith({
        foo: 'bar'
      });
    });
  });
  describe("#updateAll(changed_attributes)", function() {
    beforeEach(function() {
      return spyOn(this.hoodie.store, "updateAll").andCallThrough();
    });
    it("should proxy to hoodie.store.updateAll('$share', changed_attributes)", function() {
      this.hoodie.store.updateAll.andCallThrough();
      this.share.updateAll({
        funky: 'fresh'
      });
      return expect(this.hoodie.store.updateAll).wasCalledWith('$share', {
        funky: 'fresh'
      });
    });
    return it("should resolve with an array of Share instances", function() {
      var promise;
      this.hoodie.store.updateAll.andReturn(this.hoodie.defer().resolve([{}, {}]).promise());
      this.share.instance.andCallFake(function() {
        return this.foo = 'bar';
      });
      promise = this.share.updateAll({
        funky: 'fresh'
      });
      return expect(promise).toBeResolvedWith([
        {
          foo: 'bar'
        }, {
          foo: 'bar'
        }
      ]);
    });
  });
  describe("#remove(share_id)", function() {
    beforeEach(function() {
      spyOn(this.hoodie.store, "findAll").andReturn({
        unshareAt: function() {}
      });
      return spyOn(this.hoodie.store, "remove").andReturn('remove_promise');
    });
    return it("should init the share instance and remove it", function() {
      var promise;
      promise = this.share.remove('123');
      return expect(promise).toBe('remove_promise');
    });
  });
  return describe("#removeAll()", function() {
    beforeEach(function() {
      spyOn(this.hoodie.store, "findAll").andReturn({
        unshare: function() {}
      });
      return spyOn(this.hoodie.store, "removeAll").andReturn('remove_promise');
    });
    return it("should init the share instance and remove it", function() {
      var promise;
      promise = this.share.removeAll();
      return expect(promise).toBe('remove_promise');
    });
  });
});
