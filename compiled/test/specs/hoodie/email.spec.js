// Generated by CoffeeScript 1.3.1

define('specs/hoodie/email', ['mocks/hoodie', 'hoodie/email'], function(HoodieMock, Email) {
  return describe("Email", function() {
    beforeEach(function() {
      this.hoodie = new HoodieMock;
      this.email = new Email(this.hoodie);
      this.errorSpy = jasmine.createSpy('error');
      return this.successSpy = jasmine.createSpy('success');
    });
    return describe(".send(email_attributes)", function() {
      beforeEach(function() {
        this.email_attributes = {
          to: 'jim@be.am',
          subject: 'subject',
          body: 'body'
        };
        return (spyOn(this.hoodie.store, "create")).andReturn({
          then: function(cb) {
            return cb($.extend({}, this.email_attributes, {
              id: 'abc4567'
            }));
          }
        });
      });
      it("should reject the promise", function() {
        return expect(this.email.send(this.email_attributes)).toBePromise();
      });
      it("should save the email as object with type: $email", function() {
        this.email.send(this.email_attributes);
        return (expect(this.hoodie.store.create)).wasCalledWith('$email', this.email_attributes);
      });
      it("should listen to server response", function() {
        spyOn(this.hoodie, "one");
        this.email.send(this.email_attributes);
        (expect(this.hoodie.one)).wasCalled();
        return (expect(this.hoodie.one.mostRecentCall.args[0])).toEqual("remote:updated:$email:abc4567");
      });
      _when("email.to is not provided", function() {
        beforeEach(function() {
          return this.email_attributes.to = '';
        });
        return it("should reject the promise", function() {
          var promise;
          promise = this.email.send(this.email_attributes);
          promise.fail(this.errorSpy);
          return (expect(this.errorSpy)).wasCalledWith($.extend(this.email_attributes, {
            error: 'Invalid email address (empty)'
          }));
        });
      });
      _when("email.to is 'invalid'", function() {
        beforeEach(function() {
          return this.email_attributes.to = 'invalid';
        });
        return it("should reject the promise", function() {
          var promise;
          promise = this.email.send(this.email_attributes);
          promise.fail(this.errorSpy);
          return (expect(this.errorSpy)).wasCalledWith($.extend(this.email_attributes, {
            error: 'Invalid email address (invalid)'
          }));
        });
      });
      _when("sending email was successful", function() {
        beforeEach(function() {
          var _this = this;
          this.email_response_attributes = $.extend({}, this.email_attributes, {
            id: 'abc4567',
            delivered_at: "2012-05-05 15:00 UTC"
          });
          (spyOn(this.hoodie, "one")).andCallFake(function(event, cb) {
            return cb(_this.email_response_attributes);
          });
          return this.promise = this.email.send(this.email_attributes);
        });
        return it("should resolve the promise", function() {
          this.promise.done(this.successSpy);
          return (expect(this.successSpy)).wasCalledWith(this.email_response_attributes);
        });
      });
      return _when("sending email had an error", function() {
        beforeEach(function() {
          var _this = this;
          this.email_response_attributes = $.extend({}, this.email_attributes, {
            id: 'abc4567',
            error: "U SPAM!"
          });
          (spyOn(this.hoodie, "one")).andCallFake(function(event, cb) {
            return cb(_this.email_response_attributes);
          });
          return this.promise = this.email.send(this.email_attributes);
        });
        return it("should resolve the promise", function() {
          this.promise.fail(this.errorSpy);
          return (expect(this.errorSpy)).wasCalledWith(this.email_response_attributes);
        });
      });
    });
  });
});
