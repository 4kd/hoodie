// Generated by CoffeeScript 1.3.3

describe("Hoodie.RemoteStore", function() {
  beforeEach(function() {
    this.hoodie = new Mocks.Hoodie;
    this.remote = new Hoodie.RemoteStore(this.hoodie);
    spyOn(this.hoodie, "on");
    spyOn(this.hoodie, "one");
    return spyOn(this.hoodie, "unbind");
  });
  describe(".constructor(@hoodie, options = {})", function() {
    it("should set @basePath", function() {
      var remote;
      remote = new Hoodie.RemoteStore(this.hoodie, {
        basePath: '/base/path'
      });
      return expect(remote.basePath).toBe('/base/path');
    });
    it("should set _sync to false by default", function() {
      var remote;
      remote = new Hoodie.RemoteStore(this.hoodie);
      return expect(remote._sync).toBe(false);
    });
    return it("should set _sync to false from pased sync option", function() {
      var remote;
      remote = new Hoodie.RemoteStore(this.hoodie, {
        sync: true
      });
      return expect(remote._sync).toBe(true);
    });
  });
  describe("load(type, id)", function() {});
  describe("loadAll(type )", function() {});
  describe("create(type, object)", function() {});
  describe("save(type, id, object)", function() {});
  describe("update(new_properties )", function() {});
  describe("updateAll( type, new_properties)", function() {});
  describe("delete(type, id)", function() {});
  describe("deleteAll(type)", function() {});
  describe("get(view, params)", function() {});
  describe("post(view, params)", function() {});
  describe(".connect()", function() {});
  describe(".disconnect()", function() {});
  describe(".isContinuouslyPulling()", function() {
    _when("remote._sync is false", function() {
      return it("should return false", function() {
        this.remote._sync = false;
        return expect(this.remote.isContinuouslyPulling()).toBe(false);
      });
    });
    _when("remote._sync is true", function() {
      return it("should return true", function() {
        this.remote._sync = true;
        return expect(this.remote.isContinuouslyPulling()).toBe(true);
      });
    });
    _when("remote._sync is pull: true", function() {
      return it("should return true", function() {
        this.remote._sync = {
          pull: true
        };
        return expect(this.remote.isContinuouslyPulling()).toBe(true);
      });
    });
    return _when("remote._sync is push: true", function() {
      return it("should return false", function() {
        this.remote._sync = {
          push: true
        };
        return expect(this.remote.isContinuouslyPulling()).toBe(false);
      });
    });
  });
  describe(".isContinuouslyPushing()", function() {
    _when("remote._sync is false", function() {
      return it("should return false", function() {
        this.remote._sync = false;
        return expect(this.remote.isContinuouslyPushing()).toBe(false);
      });
    });
    _when("remote._sync is true", function() {
      return it("should return true", function() {
        this.remote._sync = true;
        return expect(this.remote.isContinuouslyPushing()).toBe(true);
      });
    });
    _when("remote._sync is pull: true", function() {
      return it("should return false", function() {
        this.remote._sync = {
          pull: true
        };
        return expect(this.remote.isContinuouslyPushing()).toBe(false);
      });
    });
    return _when("remote._sync is push: true", function() {
      return it("should return true", function() {
        this.remote._sync = {
          push: true
        };
        return expect(this.remote.isContinuouslyPushing()).toBe(true);
      });
    });
  });
  describe(".isContinuouslySyncing()", function() {
    _when("remote._sync is false", function() {
      return it("should return false", function() {
        this.remote._sync = false;
        return expect(this.remote.isContinuouslySyncing()).toBe(false);
      });
    });
    _when("remote._sync is true", function() {
      return it("should return true", function() {
        this.remote._sync = true;
        return expect(this.remote.isContinuouslySyncing()).toBe(true);
      });
    });
    _when("remote._sync is pull: true", function() {
      return it("should return false", function() {
        this.remote._sync = {
          pull: true
        };
        return expect(this.remote.isContinuouslySyncing()).toBe(false);
      });
    });
    return _when("remote._sync is push: true", function() {
      return it("should return false", function() {
        this.remote._sync = {
          push: true
        };
        return expect(this.remote.isContinuouslySyncing()).toBe(false);
      });
    });
  });
  describe(".pull()", function() {});
  describe(".push(docs)", function() {});
  describe(".sync(docs)", function() {});
  return describe(".on(event, callback)", function() {
    return it("should namespace events with `remote`", function() {
      var cb;
      cb = jasmine.createSpy('test');
      this.remote.on('funky', cb);
      return expect(this.hoodie.on).wasCalledWith('remote:funky', cb);
    });
  });
});
