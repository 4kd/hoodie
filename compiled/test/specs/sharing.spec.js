// Generated by CoffeeScript 1.3.1

define('specs/sharing', ['mocks/hoodie', 'hoodie/sharing'], function(HoodieMock, Sharing) {
  return describe("Sharing", function() {
    beforeEach(function() {
      this.hoodie = new HoodieMock;
      return this.sharing = new Sharing(this.hoodie);
    });
    return describe(".create(options)", function() {
      beforeEach(function() {
        return spyOn(this.hoodie.store, "save").andCallThrough();
      });
      it("should set private to true when invitees passed", function() {
        this.sharing.create({
          invitees: ['joe@example.com', 'bill@example.com']
        });
        return expect(this.hoodie.store.save).wasCalledWith('$sharing', void 0, {
          "private": true,
          invitees: ['joe@example.com', 'bill@example.com']
        });
      });
      return it("should turn passed filters into a stringified fuction", function() {
        this.sharing.create({
          filters: [
            {
              shared: true,
              "public": true,
              price: 0,
              autor: "Joe Doe"
            }
          ]
        });
        return expect(this.hoodie.store.save).wasCalledWith('$sharing', void 0, {
          filter: "function(obj) { return obj['shared'] == true && obj['public'] == true && obj['price'] == 0 && obj['autor'] == 'Joe Doe' }"
        });
      });
    });
  });
});
